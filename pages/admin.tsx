import axios from "axios";
import Head from "next/head";
import Link from "next/link";
import useSWR, { Fetcher } from "swr";
import { BsThreeDotsVertical } from "react-icons/bs";
import ContentBox from "../components/ContentBox";
import Modal from "../components/Modal";
import { useState, useEffect } from "react";
import { getCookie, deleteCookie } from "cookies-next";
import { useRouter } from "next/router";
import { VscSignOut } from "react-icons/vsc";
import { HiUpload } from "react-icons/hi";
import UploadModal from "../components/UploadModal";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { IoMdClose } from "react-icons/io";
import { FiMenu } from "react-icons/fi";
import { AiOutlineMenu } from "react-icons/ai";
import Image from "next/image";
import { Interface } from "readline";

const Loading = () => (
  <>
    {[...Array(5)].map((e, i) => (
      <div
        key={i}
        className="relative animate-pulse flex items-center justify-center p-5 bg-gray-200 w-full h-40 rounded-md"
      />
    ))}
  </>
);

interface Images {
  nama_file: string;
  kategori: string;
  created_at: string
}

type DataImages = {
  images: Images[];
};

type Kategori = {
  name: string;
  kat: string;
  date: string
}

export default function Admin() {
  const fetcher: Fetcher<DataImages> = (url: string) =>
    fetch(url).then((res) => res.json());
  const apiEndPoint = "https://project-api.xolusi.com/readfilesAdmin.php";
  const { data } = useSWR<DataImages>(apiEndPoint, fetcher);
  const [modalUrl, setModalUrl] = useState("");
  const [showDropdown, setShowDropdown] = useState(false);
  const [uploadModal, setUploadModal] = useState(false);
  const router = useRouter();

  useEffect(() => {
    getCookie("account") !== "admin" && router.push("/");
  }, []);

  const onSignOut = () => {
    deleteCookie("account");
    router.push("/");
  };

  const showUploadModal = () => {
    setUploadModal(true);
    setShowDropdown(false);
  };

  const sortedContent = (): Kategori[][] => {
    // const sortedContent = ():DataImages => {

    // Extract the file extension from the `imgPath` property of each object
    // const extA = a.split(".").pop();
    // const extB = b.split(".").pop();

    // Define a mapping of file extensions to document types
    const docTypes: { [extension: string]: string } = {
      png: "1_image",
      webp: "1_image",
      jpeg: "1_image",
      pdf: "2_pdf",
      docx: "3_document",
      xlsx: "4_spreadsheet",
      mp4: "video",
      mp3: "audio",
    };

    // SORT BY DATE
    // GROUP BY CATEGORY

    // Use the mapping to get the document type for each object
    // const typeA = extA ? docTypes[extA.toLowerCase()] : "unknown";
    // const typeB = extB ? docTypes[extB.toLowerCase()] : "unknown";

    // Compare the document types and return a value based on the result
    // if (typeA < typeB) {
    //   return -1;
    // }
    // if (typeA > typeB) {
    //   return 1;
    // }
    // return 0;
    // return data?.images.map(img=>img.nama_file)
    console.log(data?.images);
    let cats = []
    const uniqueCat = data?.images.map(d=>{
      // sort by date


      // cek object pertama untuk setiap array di cats

    })
    
    return [
      [
        { name: 'test1.pdf', kat: 'test', date: '2022-12-30' },
        { name: 'test2.pdf', kat: 'test', date: '2022-12-30' },
      ],
      [
        { name: 'test21.pdf', kat: 'test2', date: '2022-12-30' },
        { name: 'test21.pdf', kat: 'test2', date: '2022-12-30' },
        { name: 'test22.pdf', kat: 'test2', date: '2023-01-13' },
      ],
      [
        { name: 'test21.pdf', kat: '', date: '2022-12-30' },
      ]
    ]
  };

  return (
    <div className="relative flex flex-col h-screen md:px-[18%] overflow-hidden bg-gray-400">
      <Head>
        <title>Distribusi Konten Digital UNDIPA</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {uploadModal && (
        <UploadModal mutateEndPoint={apiEndPoint} setShow={setUploadModal} />
      )}
      <div className="flex items-center bg-gray-700  text-white justify-between px-4 py-2">
        <h1 className="text-xl font-semibold flex gap-1">
          Selamat datang Admin!
        </h1>
        {/* action menu */}
        <div className="relative inline-block text-left">
          <div>
            <button
              type="button"
              className={`p-3 rounded-full bg-opacity-5 ${showDropdown && "bg-gray-300 "
                }`}
              onClick={() => setShowDropdown(!showDropdown)}
              id="menu-button"
              aria-expanded="true"
              aria-haspopup="true"
            >
              {showDropdown ? (
                <IoMdClose size={18} />
              ) : (
                <AiOutlineMenu size={24} />
              )}
            </button>
          </div>
          <div
            className={`${!showDropdown && "hidden"
              } flex flex-col text-gray-700 px-2 items-center justify-between absolute right-0 z-10 mt-2 w-24 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none`}
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="menu-button"
            tabIndex={-1}
          >
            <div className="flex justify-between items-center w-full">
              <button
                onClick={showUploadModal}
                className="block w-full py-2 text-right text-sm mr-1"
              >
                Upload
              </button>
              <HiUpload onClick={showUploadModal} className="text-xl" />
            </div>
            <div className="flex justify-between items-center  w-full">
              <button
                onClick={onSignOut}
                className="block w-full py-2 text-right text-sm mr-1"
              >
                Keluar
              </button>
              <VscSignOut onClick={onSignOut} className="text-xl" />
            </div>
          </div>
        </div>
      </div>
      {modalUrl !== "" && (
        <Modal
          mutateEndPoint={apiEndPoint}
          admin={true}
          setModalUrl={setModalUrl}
          path={modalUrl}
        />
      )}
      {/* konten */}
      <div className="h-full overflow-y-auto bg-gray-50 bg-logo-background bg-no-repeat bg-contain bg-center">
        <div className="grid place-items-start md:grid-cols-5 p-4 grid-cols-3 w-full gap-2 h-fit overflow-y-auto">
        <h2 className="text-lg font-medium col-span-full mt-2 text-gray-800">Sort By:</h2>
          {!data ? (
            <Loading />
          ) : (
            sortedContent()?.map((kategori: Kategori[]) => {
              const contents = kategori.map(k => {
                return {name:k.name,date:k.date}
              })
              const catName = kategori[0].kat.charAt(0).toUpperCase() + kategori[0].kat.slice(1);
              const title = catName
              return (
                <>
                  <h2 className="text-lg font-medium col-span-full mt-2 text-gray-800">{title || 'Tanpa Kategori'}</h2>
                  {contents.map((img: {name:string,date:string}, i: number) => (
                    <ContentBox
                      key={i}
                      setModalUrl={setModalUrl}
                      path={img.name}
                      date={img.date}
                      index={i}
                    />
                  ))}
                </>
              )
            })
          )}
        </div>
      </div>
      <ToastContainer position="top-right" />
    </div>
  );
}
